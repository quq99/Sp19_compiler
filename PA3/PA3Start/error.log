Warning : Terminal "UMINUS" was declared but never used
Warning : Terminal "COLOR_LITERAL" was declared but never used
Warning : Terminal "INT" was declared but never used
Warning : Terminal "MINUS" was declared but never used
Warning : Terminal "NOT" was declared but never used
Warning : Terminal "LT" was declared but never used
Warning : Terminal "BUTTON_LITERAL" was declared but never used
Warning : Terminal "PLUS" was declared but never used
Warning : Terminal "ASSIGN" was declared but never used
Warning : Terminal "IF" was declared but never used
Warning : Terminal "THIS" was declared but never used
Warning : Terminal "DOT" was declared but never used
Warning : Terminal "MEGGYGETPIXEL" was declared but never used
Warning : Terminal "TONE_LITERAL" was declared but never used
Warning : Terminal "BOOLEAN" was declared but never used
Warning : Terminal "EQUAL" was declared but never used
Warning : Terminal "TRUE" was declared but never used
Warning : Terminal "NEW" was declared but never used
Warning : Terminal "MEGGYSETAUXLEDS" was declared but never used
Warning : Terminal "MEGGYTONESTART" was declared but never used
Warning : Terminal "BYTE" was declared but never used
Warning : Terminal "TIMES" was declared but never used
Warning : Terminal "MEGGYCHECKBUTTON" was declared but never used
Warning : Terminal "ELSE" was declared but never used
Warning : Terminal "WHILE" was declared but never used
Warning : Terminal "MEGGYTONE" was declared but never used
Warning : Terminal "EXTENDS" was declared but never used
Warning : Terminal "MEGGYDELAY" was declared but never used
Warning : Terminal "FALSE" was declared but never used
Warning : Terminal "MEGGYBUTTON" was declared but never used
Warning : Terminal "LENGTH" was declared but never used
Warning : Terminal "INT_LITERAL" was declared but never used
Warning : *** Reduce/Reduce conflict found in state #34
  between statement_list ::= (*) 
  and     statement_list ::= (*) 
  under symbols: {RBRACE, RETURN, MEGGYSETPIXEL}
  Resolved in favor of the second production.

Warning : *** Shift/Reduce conflict found in state #34
  between statement_list ::= (*) 
  under symbol RBRACE
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #34
  between statement_list ::= (*) 
  under symbol RETURN
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #34
  between statement_list ::= (*) 
  under symbol MEGGYSETPIXEL
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #34
  between statement_list ::= (*) 
  under symbol RBRACE
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #34
  between statement_list ::= (*) 
  under symbol RETURN
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #34
  between statement_list ::= (*) 
  under symbol MEGGYSETPIXEL
  Resolved in favor of shifting.

Warning : *** Reduce/Reduce conflict found in state #68
  between statement_list ::= (*) 
  and     statement_list ::= (*) 
  under symbols: {RBRACE, MEGGYSETPIXEL}
  Resolved in favor of the second production.

Warning : *** Shift/Reduce conflict found in state #68
  between statement_list ::= (*) 
  under symbol RBRACE
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #68
  between statement_list ::= (*) 
  under symbol MEGGYSETPIXEL
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #68
  between statement_list ::= (*) 
  under symbol RBRACE
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #68
  between statement_list ::= (*) 
  under symbol MEGGYSETPIXEL
  Resolved in favor of shifting.

Warning : *** Reduce/Reduce conflict found in state #37
  between statement_list ::= statement_list statement (*) 
  and     statement_list ::= statement_list statement (*) 
  under symbols: {RBRACE, RETURN, MEGGYSETPIXEL}
  Resolved in favor of the second production.

Warning : *** Shift/Reduce conflict found in state #37
  between statement_list ::= statement_list statement (*) 
  under symbol RBRACE
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #37
  between statement_list ::= statement_list statement (*) 
  under symbol RETURN
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #37
  between statement_list ::= statement_list statement (*) 
  under symbol MEGGYSETPIXEL
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #37
  between statement_list ::= statement_list statement (*) 
  under symbol RBRACE
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #37
  between statement_list ::= statement_list statement (*) 
  under symbol RETURN
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #37
  between statement_list ::= statement_list statement (*) 
  under symbol MEGGYSETPIXEL
  Resolved in favor of shifting.

Warning : *** Production "exp_list ::= " never reduced
Warning : *** Production "exp_list ::= exp " never reduced
Warning : *** Production "exp_list ::= exp_list COMMA exp " never reduced
Warning : *** Production "statement_list ::= " never reduced
Warning : *** Production "statement_list ::= statement_list statement " never reduced
Error : *** More conflicts encountered than expected -- parser generation aborted
===== Terminals =====
[0]EOF [1]error [2]PLUS [3]MINUS [4]TIMES 
[5]LPAREN [6]RPAREN [7]LBRACE [8]RBRACE [9]BOOLEAN 
[10]INT [11]BYTE [12]MAIN [13]IMPORT [14]IF 
[15]ELSE [16]LT [17]EQUAL [18]AND [19]NOT 
[20]WHILE [21]COMMA [22]DOT [23]NEW [24]PUBLIC 
[25]RETURN [26]STATIC [27]STRING [28]VOID [29]CLASS 
[30]EXTENDS [31]LBRACKET [32]RBRACKET [33]LENGTH [34]SEMI 
[35]ASSIGN [36]MEGGY [37]MEGGYCOLOR [38]MEGGYBUTTON [39]MEGGYTONE 
[40]MEGGYSETPIXEL [41]MEGGYSETAUXLEDS [42]MEGGYTONESTART [43]MEGGYDELAY [44]MEGGYGETPIXEL 
[45]MEGGYCHECKBUTTON [46]INT_LITERAL [47]ID [48]TRUE [49]FALSE 
[50]COLOR_LITERAL [51]BUTTON_LITERAL [52]TONE_LITERAL [53]THIS [54]UMINUS 


===== Non terminals =====
[0]program [1]exp [2]main_class [3]statement [4]statement_list 
[5]type [6]class_declaration [7]class_declaration_list [8]method_declaration [9]method_declaration_list 
[10]var_declaration_list [11]formal_param [12]block_statement [13]formal_param_list [14]exp_list 
[15]identifier [16]return_stmt [17]var_declaration 

===== Productions =====
[0] $START ::= program EOF 
[1] program ::= IMPORT MEGGY SEMI main_class class_declaration_list 
[2] class_declaration_list ::= class_declaration_list class_declaration 
[3] class_declaration_list ::= 
[4] main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement RBRACE 
[5] block_statement ::= LBRACE statement_list RBRACE 
[6] statement_list ::= statement_list statement 
[7] statement_list ::= 
[8] class_declaration ::= CLASS identifier LBRACE var_declaration_list method_declaration_list RBRACE 
[9] formal_param_list ::= formal_param_list COMMA formal_param 
[10] formal_param_list ::= formal_param 
[11] formal_param_list ::= 
[12] formal_param ::= type identifier 
[13] var_declaration ::= type identifier SEMI 
[14] method_declaration ::= PUBLIC type identifier LPAREN formal_param_list RPAREN LBRACE var_declaration_list statement_list return_stmt RBRACE 
[15] method_declaration_list ::= method_declaration_list method_declaration 
[16] method_declaration_list ::= 
[17] var_declaration_list ::= var_declaration_list var_declaration 
[18] var_declaration_list ::= 
[19] return_stmt ::= RETURN exp SEMI 
[20] return_stmt ::= 
[21] type ::= MEGGYCOLOR LBRACKET RBRACKET 
[22] statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI 
[23] statement_list ::= statement_list statement 
[24] statement_list ::= 
[25] exp ::= exp AND exp 
[26] exp_list ::= exp_list COMMA exp 
[27] exp_list ::= exp 
[28] exp_list ::= 
[29] identifier ::= ID 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [program ::= (*) IMPORT MEGGY SEMI main_class class_declaration_list , {EOF }]
  [$START ::= (*) program EOF , {EOF }]
}
transition on IMPORT to state [2]
transition on program to state [1]

-------------------
lalr_state [1]: {
  [$START ::= program (*) EOF , {EOF }]
}
transition on EOF to state [72]

-------------------
lalr_state [2]: {
  [program ::= IMPORT (*) MEGGY SEMI main_class class_declaration_list , {EOF }]
}
transition on MEGGY to state [3]

-------------------
lalr_state [3]: {
  [program ::= IMPORT MEGGY (*) SEMI main_class class_declaration_list , {EOF }]
}
transition on SEMI to state [4]

-------------------
lalr_state [4]: {
  [program ::= IMPORT MEGGY SEMI (*) main_class class_declaration_list , {EOF }]
  [main_class ::= (*) CLASS identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement RBRACE , {EOF CLASS }]
}
transition on main_class to state [6]
transition on CLASS to state [5]

-------------------
lalr_state [5]: {
  [identifier ::= (*) ID , {LBRACE }]
  [main_class ::= CLASS (*) identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement RBRACE , {EOF CLASS }]
}
transition on identifier to state [55]
transition on ID to state [10]

-------------------
lalr_state [6]: {
  [class_declaration_list ::= (*) class_declaration_list class_declaration , {EOF CLASS }]
  [program ::= IMPORT MEGGY SEMI main_class (*) class_declaration_list , {EOF }]
  [class_declaration_list ::= (*) , {EOF CLASS }]
}
transition on class_declaration_list to state [7]

-------------------
lalr_state [7]: {
  [class_declaration ::= (*) CLASS identifier LBRACE var_declaration_list method_declaration_list RBRACE , {EOF CLASS }]
  [program ::= IMPORT MEGGY SEMI main_class class_declaration_list (*) , {EOF }]
  [class_declaration_list ::= class_declaration_list (*) class_declaration , {EOF CLASS }]
}
transition on class_declaration to state [9]
transition on CLASS to state [8]

-------------------
lalr_state [8]: {
  [identifier ::= (*) ID , {LBRACE }]
  [class_declaration ::= CLASS (*) identifier LBRACE var_declaration_list method_declaration_list RBRACE , {EOF CLASS }]
}
transition on identifier to state [11]
transition on ID to state [10]

-------------------
lalr_state [9]: {
  [class_declaration_list ::= class_declaration_list class_declaration (*) , {EOF CLASS }]
}

-------------------
lalr_state [10]: {
  [identifier ::= ID (*) , {LPAREN RPAREN LBRACE COMMA SEMI }]
}

-------------------
lalr_state [11]: {
  [class_declaration ::= CLASS identifier (*) LBRACE var_declaration_list method_declaration_list RBRACE , {EOF CLASS }]
}
transition on LBRACE to state [12]

-------------------
lalr_state [12]: {
  [var_declaration_list ::= (*) , {RBRACE PUBLIC MEGGYCOLOR }]
  [var_declaration_list ::= (*) var_declaration_list var_declaration , {RBRACE PUBLIC MEGGYCOLOR }]
  [class_declaration ::= CLASS identifier LBRACE (*) var_declaration_list method_declaration_list RBRACE , {EOF CLASS }]
}
transition on var_declaration_list to state [13]

-------------------
lalr_state [13]: {
  [method_declaration_list ::= (*) , {RBRACE PUBLIC }]
  [var_declaration ::= (*) type identifier SEMI , {RBRACE PUBLIC MEGGYCOLOR }]
  [type ::= (*) MEGGYCOLOR LBRACKET RBRACKET , {ID }]
  [method_declaration_list ::= (*) method_declaration_list method_declaration , {RBRACE PUBLIC }]
  [class_declaration ::= CLASS identifier LBRACE var_declaration_list (*) method_declaration_list RBRACE , {EOF CLASS }]
  [var_declaration_list ::= var_declaration_list (*) var_declaration , {RBRACE PUBLIC MEGGYCOLOR }]
}
transition on MEGGYCOLOR to state [17]
transition on type to state [16]
transition on method_declaration_list to state [15]
transition on var_declaration to state [14]

-------------------
lalr_state [14]: {
  [var_declaration_list ::= var_declaration_list var_declaration (*) , {RBRACE PUBLIC RETURN MEGGYCOLOR MEGGYSETPIXEL }]
}

-------------------
lalr_state [15]: {
  [method_declaration_list ::= method_declaration_list (*) method_declaration , {RBRACE PUBLIC }]
  [class_declaration ::= CLASS identifier LBRACE var_declaration_list method_declaration_list (*) RBRACE , {EOF CLASS }]
  [method_declaration ::= (*) PUBLIC type identifier LPAREN formal_param_list RPAREN LBRACE var_declaration_list statement_list return_stmt RBRACE , {RBRACE PUBLIC }]
}
transition on method_declaration to state [24]
transition on PUBLIC to state [23]
transition on RBRACE to state [22]

-------------------
lalr_state [16]: {
  [var_declaration ::= type (*) identifier SEMI , {RBRACE PUBLIC RETURN MEGGYCOLOR MEGGYSETPIXEL }]
  [identifier ::= (*) ID , {SEMI }]
}
transition on identifier to state [20]
transition on ID to state [10]

-------------------
lalr_state [17]: {
  [type ::= MEGGYCOLOR (*) LBRACKET RBRACKET , {ID }]
}
transition on LBRACKET to state [18]

-------------------
lalr_state [18]: {
  [type ::= MEGGYCOLOR LBRACKET (*) RBRACKET , {ID }]
}
transition on RBRACKET to state [19]

-------------------
lalr_state [19]: {
  [type ::= MEGGYCOLOR LBRACKET RBRACKET (*) , {ID }]
}

-------------------
lalr_state [20]: {
  [var_declaration ::= type identifier (*) SEMI , {RBRACE PUBLIC RETURN MEGGYCOLOR MEGGYSETPIXEL }]
}
transition on SEMI to state [21]

-------------------
lalr_state [21]: {
  [var_declaration ::= type identifier SEMI (*) , {RBRACE PUBLIC RETURN MEGGYCOLOR MEGGYSETPIXEL }]
}

-------------------
lalr_state [22]: {
  [class_declaration ::= CLASS identifier LBRACE var_declaration_list method_declaration_list RBRACE (*) , {EOF CLASS }]
}

-------------------
lalr_state [23]: {
  [type ::= (*) MEGGYCOLOR LBRACKET RBRACKET , {ID }]
  [method_declaration ::= PUBLIC (*) type identifier LPAREN formal_param_list RPAREN LBRACE var_declaration_list statement_list return_stmt RBRACE , {RBRACE PUBLIC }]
}
transition on MEGGYCOLOR to state [17]
transition on type to state [25]

-------------------
lalr_state [24]: {
  [method_declaration_list ::= method_declaration_list method_declaration (*) , {RBRACE PUBLIC }]
}

-------------------
lalr_state [25]: {
  [identifier ::= (*) ID , {LPAREN }]
  [method_declaration ::= PUBLIC type (*) identifier LPAREN formal_param_list RPAREN LBRACE var_declaration_list statement_list return_stmt RBRACE , {RBRACE PUBLIC }]
}
transition on identifier to state [26]
transition on ID to state [10]

-------------------
lalr_state [26]: {
  [method_declaration ::= PUBLIC type identifier (*) LPAREN formal_param_list RPAREN LBRACE var_declaration_list statement_list return_stmt RBRACE , {RBRACE PUBLIC }]
}
transition on LPAREN to state [27]

-------------------
lalr_state [27]: {
  [type ::= (*) MEGGYCOLOR LBRACKET RBRACKET , {ID }]
  [formal_param_list ::= (*) formal_param , {RPAREN COMMA }]
  [method_declaration ::= PUBLIC type identifier LPAREN (*) formal_param_list RPAREN LBRACE var_declaration_list statement_list return_stmt RBRACE , {RBRACE PUBLIC }]
  [formal_param ::= (*) type identifier , {RPAREN COMMA }]
  [formal_param_list ::= (*) formal_param_list COMMA formal_param , {RPAREN COMMA }]
  [formal_param_list ::= (*) , {RPAREN COMMA }]
}
transition on formal_param_list to state [30]
transition on MEGGYCOLOR to state [17]
transition on type to state [29]
transition on formal_param to state [28]

-------------------
lalr_state [28]: {
  [formal_param_list ::= formal_param (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [29]: {
  [identifier ::= (*) ID , {RPAREN COMMA }]
  [formal_param ::= type (*) identifier , {RPAREN COMMA }]
}
transition on identifier to state [54]
transition on ID to state [10]

-------------------
lalr_state [30]: {
  [method_declaration ::= PUBLIC type identifier LPAREN formal_param_list (*) RPAREN LBRACE var_declaration_list statement_list return_stmt RBRACE , {RBRACE PUBLIC }]
  [formal_param_list ::= formal_param_list (*) COMMA formal_param , {RPAREN COMMA }]
}
transition on RPAREN to state [32]
transition on COMMA to state [31]

-------------------
lalr_state [31]: {
  [type ::= (*) MEGGYCOLOR LBRACKET RBRACKET , {ID }]
  [formal_param_list ::= formal_param_list COMMA (*) formal_param , {RPAREN COMMA }]
  [formal_param ::= (*) type identifier , {RPAREN COMMA }]
}
transition on MEGGYCOLOR to state [17]
transition on type to state [29]
transition on formal_param to state [53]

-------------------
lalr_state [32]: {
  [method_declaration ::= PUBLIC type identifier LPAREN formal_param_list RPAREN (*) LBRACE var_declaration_list statement_list return_stmt RBRACE , {RBRACE PUBLIC }]
}
transition on LBRACE to state [33]

-------------------
lalr_state [33]: {
  [method_declaration ::= PUBLIC type identifier LPAREN formal_param_list RPAREN LBRACE (*) var_declaration_list statement_list return_stmt RBRACE , {RBRACE PUBLIC }]
  [var_declaration_list ::= (*) , {RBRACE RETURN MEGGYCOLOR MEGGYSETPIXEL }]
  [var_declaration_list ::= (*) var_declaration_list var_declaration , {RBRACE RETURN MEGGYCOLOR MEGGYSETPIXEL }]
}
transition on var_declaration_list to state [34]

-------------------
lalr_state [34]: {
  [method_declaration ::= PUBLIC type identifier LPAREN formal_param_list RPAREN LBRACE var_declaration_list (*) statement_list return_stmt RBRACE , {RBRACE PUBLIC }]
  [var_declaration ::= (*) type identifier SEMI , {RBRACE RETURN MEGGYCOLOR MEGGYSETPIXEL }]
  [statement_list ::= (*) , {RBRACE RETURN MEGGYSETPIXEL }]
  [type ::= (*) MEGGYCOLOR LBRACKET RBRACKET , {ID }]
  [statement_list ::= (*) , {RBRACE RETURN MEGGYSETPIXEL }]
  [statement_list ::= (*) statement_list statement , {RBRACE RETURN MEGGYSETPIXEL }]
  [var_declaration_list ::= var_declaration_list (*) var_declaration , {RBRACE RETURN MEGGYCOLOR MEGGYSETPIXEL }]
  [statement_list ::= (*) statement_list statement , {RBRACE RETURN MEGGYSETPIXEL }]
}
transition on MEGGYCOLOR to state [17]
transition on type to state [16]
transition on var_declaration to state [14]
transition on statement_list to state [35]

-------------------
lalr_state [35]: {
  [return_stmt ::= (*) RETURN exp SEMI , {RBRACE }]
  [method_declaration ::= PUBLIC type identifier LPAREN formal_param_list RPAREN LBRACE var_declaration_list statement_list (*) return_stmt RBRACE , {RBRACE PUBLIC }]
  [statement_list ::= statement_list (*) statement , {RBRACE RETURN MEGGYSETPIXEL }]
  [return_stmt ::= (*) , {RBRACE }]
  [statement_list ::= statement_list (*) statement , {RBRACE RETURN MEGGYSETPIXEL }]
  [statement ::= (*) MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI , {RBRACE RETURN MEGGYSETPIXEL }]
}
transition on return_stmt to state [39]
transition on MEGGYSETPIXEL to state [38]
transition on statement to state [37]
transition on RETURN to state [36]

-------------------
lalr_state [36]: {
  [exp ::= (*) exp AND exp , {AND SEMI }]
  [return_stmt ::= RETURN (*) exp SEMI , {RBRACE }]
}
transition on exp to state [51]

-------------------
lalr_state [37]: {
  [statement_list ::= statement_list statement (*) , {RBRACE RETURN MEGGYSETPIXEL }]
  [statement_list ::= statement_list statement (*) , {RBRACE RETURN MEGGYSETPIXEL }]
}

-------------------
lalr_state [38]: {
  [statement ::= MEGGYSETPIXEL (*) LPAREN exp COMMA exp COMMA exp RPAREN SEMI , {RBRACE RETURN MEGGYSETPIXEL }]
}
transition on LPAREN to state [41]

-------------------
lalr_state [39]: {
  [method_declaration ::= PUBLIC type identifier LPAREN formal_param_list RPAREN LBRACE var_declaration_list statement_list return_stmt (*) RBRACE , {RBRACE PUBLIC }]
}
transition on RBRACE to state [40]

-------------------
lalr_state [40]: {
  [method_declaration ::= PUBLIC type identifier LPAREN formal_param_list RPAREN LBRACE var_declaration_list statement_list return_stmt RBRACE (*) , {RBRACE PUBLIC }]
}

-------------------
lalr_state [41]: {
  [statement ::= MEGGYSETPIXEL LPAREN (*) exp COMMA exp COMMA exp RPAREN SEMI , {RBRACE RETURN MEGGYSETPIXEL }]
  [exp ::= (*) exp AND exp , {AND COMMA }]
}
transition on exp to state [42]

-------------------
lalr_state [42]: {
  [statement ::= MEGGYSETPIXEL LPAREN exp (*) COMMA exp COMMA exp RPAREN SEMI , {RBRACE RETURN MEGGYSETPIXEL }]
  [exp ::= exp (*) AND exp , {AND COMMA }]
}
transition on AND to state [44]
transition on COMMA to state [43]

-------------------
lalr_state [43]: {
  [statement ::= MEGGYSETPIXEL LPAREN exp COMMA (*) exp COMMA exp RPAREN SEMI , {RBRACE RETURN MEGGYSETPIXEL }]
  [exp ::= (*) exp AND exp , {AND COMMA }]
}
transition on exp to state [46]

-------------------
lalr_state [44]: {
  [exp ::= exp AND (*) exp , {RPAREN AND COMMA SEMI }]
  [exp ::= (*) exp AND exp , {RPAREN AND COMMA SEMI }]
}
transition on exp to state [45]

-------------------
lalr_state [45]: {
  [exp ::= exp AND exp (*) , {RPAREN AND COMMA SEMI }]
  [exp ::= exp (*) AND exp , {RPAREN AND COMMA SEMI }]
}
transition on AND to state [44]

-------------------
lalr_state [46]: {
  [statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp (*) COMMA exp RPAREN SEMI , {RBRACE RETURN MEGGYSETPIXEL }]
  [exp ::= exp (*) AND exp , {AND COMMA }]
}
transition on AND to state [44]
transition on COMMA to state [47]

-------------------
lalr_state [47]: {
  [statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA (*) exp RPAREN SEMI , {RBRACE RETURN MEGGYSETPIXEL }]
  [exp ::= (*) exp AND exp , {RPAREN AND }]
}
transition on exp to state [48]

-------------------
lalr_state [48]: {
  [statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp (*) RPAREN SEMI , {RBRACE RETURN MEGGYSETPIXEL }]
  [exp ::= exp (*) AND exp , {RPAREN AND }]
}
transition on AND to state [44]
transition on RPAREN to state [49]

-------------------
lalr_state [49]: {
  [statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN (*) SEMI , {RBRACE RETURN MEGGYSETPIXEL }]
}
transition on SEMI to state [50]

-------------------
lalr_state [50]: {
  [statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI (*) , {RBRACE RETURN MEGGYSETPIXEL }]
}

-------------------
lalr_state [51]: {
  [exp ::= exp (*) AND exp , {AND SEMI }]
  [return_stmt ::= RETURN exp (*) SEMI , {RBRACE }]
}
transition on SEMI to state [52]
transition on AND to state [44]

-------------------
lalr_state [52]: {
  [return_stmt ::= RETURN exp SEMI (*) , {RBRACE }]
}

-------------------
lalr_state [53]: {
  [formal_param_list ::= formal_param_list COMMA formal_param (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [54]: {
  [formal_param ::= type identifier (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [55]: {
  [main_class ::= CLASS identifier (*) LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement RBRACE , {EOF CLASS }]
}
transition on LBRACE to state [56]

-------------------
lalr_state [56]: {
  [main_class ::= CLASS identifier LBRACE (*) PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement RBRACE , {EOF CLASS }]
}
transition on PUBLIC to state [57]

-------------------
lalr_state [57]: {
  [main_class ::= CLASS identifier LBRACE PUBLIC (*) STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement RBRACE , {EOF CLASS }]
}
transition on STATIC to state [58]

-------------------
lalr_state [58]: {
  [main_class ::= CLASS identifier LBRACE PUBLIC STATIC (*) VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement RBRACE , {EOF CLASS }]
}
transition on VOID to state [59]

-------------------
lalr_state [59]: {
  [main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID (*) MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement RBRACE , {EOF CLASS }]
}
transition on MAIN to state [60]

-------------------
lalr_state [60]: {
  [main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID MAIN (*) LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement RBRACE , {EOF CLASS }]
}
transition on LPAREN to state [61]

-------------------
lalr_state [61]: {
  [main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN (*) STRING LBRACKET RBRACKET identifier RPAREN block_statement RBRACE , {EOF CLASS }]
}
transition on STRING to state [62]

-------------------
lalr_state [62]: {
  [main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING (*) LBRACKET RBRACKET identifier RPAREN block_statement RBRACE , {EOF CLASS }]
}
transition on LBRACKET to state [63]

-------------------
lalr_state [63]: {
  [main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET (*) RBRACKET identifier RPAREN block_statement RBRACE , {EOF CLASS }]
}
transition on RBRACKET to state [64]

-------------------
lalr_state [64]: {
  [identifier ::= (*) ID , {RPAREN }]
  [main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET (*) identifier RPAREN block_statement RBRACE , {EOF CLASS }]
}
transition on identifier to state [65]
transition on ID to state [10]

-------------------
lalr_state [65]: {
  [main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier (*) RPAREN block_statement RBRACE , {EOF CLASS }]
}
transition on RPAREN to state [66]

-------------------
lalr_state [66]: {
  [block_statement ::= (*) LBRACE statement_list RBRACE , {RBRACE }]
  [main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN (*) block_statement RBRACE , {EOF CLASS }]
}
transition on LBRACE to state [68]
transition on block_statement to state [67]

-------------------
lalr_state [67]: {
  [main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement (*) RBRACE , {EOF CLASS }]
}
transition on RBRACE to state [71]

-------------------
lalr_state [68]: {
  [block_statement ::= LBRACE (*) statement_list RBRACE , {RBRACE }]
  [statement_list ::= (*) , {RBRACE MEGGYSETPIXEL }]
  [statement_list ::= (*) , {RBRACE MEGGYSETPIXEL }]
  [statement_list ::= (*) statement_list statement , {RBRACE MEGGYSETPIXEL }]
  [statement_list ::= (*) statement_list statement , {RBRACE MEGGYSETPIXEL }]
}
transition on statement_list to state [69]

-------------------
lalr_state [69]: {
  [statement_list ::= statement_list (*) statement , {RBRACE MEGGYSETPIXEL }]
  [statement_list ::= statement_list (*) statement , {RBRACE MEGGYSETPIXEL }]
  [statement ::= (*) MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI , {RBRACE MEGGYSETPIXEL }]
  [block_statement ::= LBRACE statement_list (*) RBRACE , {RBRACE }]
}
transition on MEGGYSETPIXEL to state [38]
transition on statement to state [37]
transition on RBRACE to state [70]

-------------------
lalr_state [70]: {
  [block_statement ::= LBRACE statement_list RBRACE (*) , {RBRACE }]
}

-------------------
lalr_state [71]: {
  [main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement RBRACE (*) , {EOF CLASS }]
}

-------------------
lalr_state [72]: {
  [$START ::= program EOF (*) , {EOF }]
}

-------------------
------- CUP v0.11a beta 20060608 Parser Generation Summary -------
  1 error and 56 warnings
  55 terminals, 18 non-terminals, and 30 productions declared, 
  producing 73 unique parse states.
  32 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  19 conflicts detected (0 expected).
  No code produced.
---------------------------------------------------- (v0.11a beta 20060608)
make: *** [src/mjparser/mj.java] Error 100
