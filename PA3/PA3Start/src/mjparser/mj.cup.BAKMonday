package mjparser;
import java_cup.runtime.*;
import java.util.*;
import java.lang.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast.node.*;
import ast_visitors.*;
import ast.visitor.*;

parser code {:

    public PrintWriter out; 
    
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] " 
                               + message + " at " + tok.toString() );
    }
            
:}

/* Notice: all terminals declared here */
terminal SymbolValue PLUS, MINUS, TIMES, LPAREN, RPAREN;
terminal SymbolValue LBRACE, RBRACE;
terminal SymbolValue BOOLEAN, INT;
terminal SymbolValue BYTE;
terminal SymbolValue MAIN, IMPORT;
terminal SymbolValue IF, ELSE;
terminal SymbolValue LT;
terminal SymbolValue EQUAL;
terminal SymbolValue AND, NOT;
terminal SymbolValue WHILE;
terminal SymbolValue COMMA, DOT;
terminal SymbolValue NEW, PUBLIC, RETURN, STATIC;
terminal SymbolValue STRING, VOID;
terminal SymbolValue CLASS, EXTENDS;
terminal SymbolValue LBRACKET, RBRACKET;
terminal SymbolValue LENGTH;
terminal SymbolValue SEMI;
terminal SymbolValue ASSIGN;

terminal SymbolValue MEGGY;
terminal SymbolValue MEGGYCOLOR;
terminal SymbolValue MEGGYBUTTON;
terminal SymbolValue MEGGYTONE;
terminal SymbolValue MEGGYSETPIXEL;
terminal SymbolValue MEGGYSETAUXLEDS;
terminal SymbolValue MEGGYTONESTART;
terminal SymbolValue MEGGYDELAY;
terminal SymbolValue MEGGYGETPIXEL;
terminal SymbolValue MEGGYCHECKBUTTON;

terminal SymbolValue INT_LITERAL, ID;
terminal SymbolValue TRUE, FALSE;
terminal SymbolValue COLOR_LITERAL, BUTTON_LITERAL, TONE_LITERAL;
terminal SymbolValue THIS;

/* bogus terminal for unary precedence declaration */
terminal UMINUS;

non terminal Program program;
non terminal IExp exp;
non terminal MainClass main_class;
non terminal IStatement statement;
non terminal LinkedList<IStatement> statement_list;
non terminal IType type;
non terminal TopClassDecl class_declaration;
non terminal LinkedList<IClassDecl> class_declaration_list;
non terminal MethodDecl method_declaration;
non terminal LinkedList<MethodDecl> method_declaration_list;
non terminal LinkedList<VarDecl> var_declaration_list;
non terminal Formal formal_param;
non terminal BlockStatement block_statement;
non terminal LinkedList<Formal> formal_param_list;
non terminal LinkedList<IExp> exp_list;
non terminal IdLiteral identifier;
non terminal IExp return_stmt;
non terminal VarDecl var_declaration;

/* Declare precedence and associativity  here */
precedence right ASSIGN;
precedence left AND;
precedence left EQUAL;
precedence left LT;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence right NOT;
precedence right UMINUS;
precedence left LBRACE, RBRACE;
precedence left LBRACKET, RBRACKET;
precedence left DOT, LPAREN, RPAREN;
precedence left ELSE;
precedence left COMMA;


/* Meggy Java Grammar */
start with program;

program ::=
    IMPORT:i MEGGY SEMI main_class:m /*class_declaration_list:class_list*/ {: RESULT = new Program(i.line, i.pos, m, null); :}
    ;

class_declaration_list ::=
    class_declaration_list:class_list class_declaration:c
    {:
        if(c != null) {
            class_list.add(c);
        }
        RESULT = class_list;
    :}
    |
    {:
        RESULT = new LinkedList<IClassDecl>();
    :}
    ;

main_class ::=
    CLASS identifier:class_name
    LBRACE
    PUBLIC STATIC VOID MAIN:m
    LPAREN STRING LBRACKET RBRACKET identifier:param_name RPAREN
    block_statement:bstmts RBRACE
    {:
        RESULT = new MainClass(m.line, m.pos, class_name.getLexeme(), param_name.getLexeme(), null);
    :}
    ;

block_statement ::=
    LBRACE:lb statement_list:list RBRACE
    {:
        RESULT = new BlockStatement(lb.line, lb.pos, list);
    :}
    ;

statement_list ::=
    statement:s statement_list:list
    {:  if (s != null) {
            list.add(0, s);
        }
        RESULT = list;
    :}
    |   /* Empty */
    {:
        RESULT = new LinkedList<IStatement>();
    :}
    ;

class_declaration ::=
    CLASS identifier:id LBRACE var_declaration_list:var_list method_declaration_list:method_list RBRACE
    {:
        RESULT = new TopClassDecl(id.getLine(), id.getPos(), id.getLexeme(), var_list, method_list);
    :}
    ;

formal_param_list ::=
    formal_param_list:list COMMA formal_param:param
    {:
        if (param != null) {
            list.add(param);
        }
        RESULT = list;
    :}
    | formal_param:param
    {:
        LinkedList<Formal> list = new LinkedList<Formal>();
        list.add(param);
        RESULT = list;
    :}
    |
    {:
        RESULT = new LinkedList<Formal>();
    :}
    ;

formal_param ::=
    type:t identifier:id
    {:
        RESULT = new Formal(t.getLine(), t.getPos(), t, id.getLexeme());
    :}
    ;

var_declaration ::=
    type:t identifier:id SEMI
    {:
        RESULT = new VarDecl(id.getLine(), id.getPos(), t, id.getLexeme());
    :}
    ;

method_declaration ::=
    PUBLIC type:t identifier:id LPAREN formal_param_list:param_list RPAREN LBRACE var_declaration_list:var_list /*statement_list:stmts*/ return_stmt:returns RBRACE
    {:
        RESULT = new MethodDecl(id.getLine(), id.getPos(), t, id.getLexeme(), param_list, var_list, null, returns);
    :}
    ;

method_declaration_list ::=
    method_declaration_list:list method_declaration:m
    {:
        if (m != null) {
            list.add(m);
        }
        RESULT = list;
    :}
    |
    {:
        RESULT = new LinkedList<MethodDecl>();
    :}
    ;

var_declaration_list ::=
    var_declaration_list:list var_declaration:v
    {:
        if (v != null) {
            list.add(v);
        }
        RESULT = list;
    :}
    |
    {:
        RESULT = new LinkedList<VarDecl>();
    :}
    ;

return_stmt ::=
    RETURN exp:e SEMI
    {:
        RESULT = e;
    :}
    |
    {:
        RESULT = null;
    :}
    ;

type ::=
    MEGGYCOLOR:m LBRACKET RBRACKET
    {:
        RESULT = new ColorArrayType(m.line, m.pos);
    :}
    /*|
    INT:i LBRACKET RBRACKET
    {:
        RESULT = new IntArrayType(i.line, i.pos);
    :}
    |
    BOOLEAN:b
    {:
        RESULT = new BoolType(b.line, b.pos);
    :}
    |
    BYTE:b
    {:
        RESULT = new ByteType(b.line, b.pos);
    :}
    |
    INT:i
    {:
        RESULT = new IntType(i.line, i.pos);
    :}
    |
    VOID:v
    {:
        RESULT = new VoidType(v.line, v.pos);
    :}
    |
    MEGGYCOLOR:m
    {:
        RESULT = new ColorType(m.line, m.pos);
    :}
    |
    MEGGYBUTTON:m
    {:
        RESULT = new ButtonType(m.line, m.pos);
    :}
    |
    MEGGYTONE:m
    {:
        RESULT = new ToneType(m.line, m.pos);
    :}
    |
    identifier:id
    {:
        RESULT = new ClassType(id.getLine(), id.getPos(), id.getLexeme());
    :}*/
    ;

statement ::=
    /*LBRACE:l statement_list:state_list RBRACE
    {:
        RESULT = new BlockStatement(l.line, l.pos, state_list);
    :}
    |
    MEGGYSETPIXEL:msp LPAREN exp:e1 COMMA exp:e2 COMMA exp:e3 RPAREN SEMI
    {:
        RESULT = new MeggySetPixel(msp.line, msp.pos, e1, e2, e3);
    :}
    |
    MEGGYSETAUXLEDS:msa LPAREN exp:e RPAREN SEMI
    {:
        RESULT = new MeggySetAuxLEDs(msa.line, msa.pos, e);
    :}
    |
    MEGGYTONESTART:mt LPAREN exp:e1 COMMA exp:e2 RPAREN SEMI
    {:
        RESULT = new MeggyToneStart(mt.line, mt.pos, e1, e2);
    :}
    |
    MEGGYDELAY:md LPAREN exp:e RPAREN SEMI
    {:
        RESULT = new MeggyDelay(md.line, md.pos, e);
    :}
    |
    exp:e1 DOT identifier:id LPAREN exp_list:list RPAREN SEMI
    {:
        RESULT = new CallStatement(e1.getLine(), e1.getPos(), e1, id.getLexeme(), list);
    :}
    |
    IF:i LPAREN exp:e RPAREN statement:s
    {:
        RESULT = new IfStatement(i.line, i.pos, e, s, null);
    :}
    |
    IF:i LPAREN exp:e RPAREN statement:s1 ELSE statement:s2
    {:
        RESULT = new IfStatement(i.line, i.pos, e, s1, s2);
    :}
    |
    WHILE:w LPAREN exp:e RPAREN statement:s
    {:
        RESULT = new WhileStatement(w.line, w.pos, e, s);
    :}
    |*/
    identifier:id ASSIGN exp:e SEMI
    {:
        RESULT = new AssignStatement(id.getLine(), id.getPos(), id.getLexeme(), e);
    :}
    /*|
    identifier:id LBRACKET exp:idx RBRACKET ASSIGN exp:e SEMI
    {:
        RESULT = new ArrayAssignStatement(id.getLine(), id.getPos(), id, idx, e);
    :}*/
    ;

statement_list ::=
    statement:s statement_list:list
    {:  if (s != null) {
            list.add(0, s);
        }
        RESULT = list;
    :}
    |   /* Empty */
    {:
        RESULT = new LinkedList<IStatement>();
    :}
    ;

exp ::=
    exp:e1 AND:op exp:e2
    {:
        RESULT = new AndExp(op.line, op.pos, e1, e2);
    :}
    /*|
    exp:e1 LT:lt exp:e2
    {:
        RESULT = new LtExp(lt.line, lt.pos, e1, e2);
    :}
    |
    exp:e1 EQUAL:eq exp:e2
    {:
        RESULT = new EqualExp(eq.line, eq.pos, e1, e2);
    :}
    |
    exp:e1 PLUS:op exp:e2
    {:
        RESULT = new PlusExp(op.line, op.pos, e1, e2);
    :}
    |
    exp:e1 MINUS:op exp:e2
    {:
        RESULT = new MinusExp(op.line, op.pos, e1, e2);
    :}
    |
    exp:e1 TIMES:op exp:e2
    {:
        RESULT = new MulExp(op.line, op.pos, e1, e2);
    :}
    |
    MINUS:m exp:e
    {:
        RESULT = new NegExp(m.line, m.pos, e);
    :}
    |
    exp:arr LBRACKET exp:idx RBRACKET
    {:
        RESULT = new ArrayExp(arr.getLine(), arr.getPos(), arr, idx);
    :}
    |
    exp:e DOT LENGTH:l
    {:
        RESULT = new LengthExp(l.line, l.pos, e);
    :}
    |
    exp:e1 DOT identifier:id LPAREN exp_list:list RPAREN
    {:
        RESULT = new CallExp(e1.getLine(), e1.getPos(), e1, id.getLexeme(), list);
    :}
    |
    MEGGYGETPIXEL:m LPAREN exp:e1 COMMA exp:e2 RPAREN
    {:
        RESULT = new MeggyGetPixel(m.line, m.pos, e1, e2);
    :}
    |
    MEGGYCHECKBUTTON:m LPAREN exp:e RPAREN
    {:
        RESULT = new MeggyCheckButton(m.line, m.pos, e);
    :}
    |
    LPAREN:lp BYTE RPAREN exp:e
    {:
        RESULT = new ByteCast(lp.line, lp.pos, e);
    :}
    |
    INT_LITERAL:n
    {:
        RESULT = new IntLiteral(n.line, n.pos, n.lexeme, n.value);
    :}
    |
    COLOR_LITERAL:c
    {:
        RESULT = new ColorLiteral(c.line, c.pos, c.lexeme, c.value);
    :}
    |
    BUTTON_LITERAL:b
    {:
        RESULT = new ButtonLiteral(b.line, b.pos, b.lexeme, b.value);
    :}
    |
    TONE_LITERAL:t
    {:
        RESULT = new ToneLiteral(t.line, t.pos, t.lexeme, t.value);
    :}
    |
    TRUE:t
    {:
        RESULT = new TrueLiteral(t.line, t.pos, t.lexeme, t.value);
    :}
    |
    FALSE:f
    {:
        RESULT = new FalseLiteral(f.line, f.pos, f.lexeme, f.value);
    :}
    |
    identifier:id
    {:
        RESULT = id;
    :}
    |
    THIS:t
    {:
        RESULT = new ThisLiteral(t.line, t.pos, t.lexeme, t.value);
    :}
    |
    NEW:n type:m LBRACKET exp:e RBRACKET
    {:
        RESULT = new NewArrayExp(n.line, n.pos, m, e);
    :}
    |
    NEW:n identifier:id LPAREN RPAREN
    {:
        RESULT = new NewExp(n.line, n.pos, id.getLexeme());
    :}
    |
    NOT:n exp:e
    {:
        RESULT = new NotExp(n.line, n.pos, e);
    :}
    |
    LPAREN exp:e RPAREN
    {:
        RESULT = e;
    :}*/

    ;

exp_list ::=
    exp_list:list COMMA exp:e
    {:
        if (e != null) {
            list.add(e);
        }
        RESULT = list;
    :}
    | exp:e
    {:
        LinkedList<IExp> list = new LinkedList<IExp>();
        if (e != null) {
            list.add(e);
        }
        RESULT = list;
    :}
    |
    {:
        RESULT = new LinkedList<IExp>();
    :}
    ;

identifier ::=
    ID:i
    {:
        RESULT = new IdLiteral(i.line, i.pos, i.lexeme);
    :}
    ;
