
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 06 16:41:43 EDT 2019
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.util.*;
import java.lang.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast.node.*;
import ast.visitor.*;
import ast_visitors.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 06 16:41:43 EDT 2019
  */
public class mj extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public mj() {super();}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\007\000\002\007" +
    "\021\000\002\005\004\000\002\005\002\000\002\006\005" +
    "\000\002\012\004\000\002\012\002\000\002\011\010\000" +
    "\002\020\005\000\002\020\003\000\002\020\002\000\002" +
    "\017\004\000\002\013\015\000\002\015\005\000\002\014" +
    "\004\000\002\014\002\000\002\016\004\000\002\016\002" +
    "\000\002\021\005\000\002\021\002\000\002\010\005\000" +
    "\002\010\005\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\004\003" +
    "\000\002\004\013\000\002\004\007\000\002\004\011\000" +
    "\002\004\007\000\002\004\011\000\002\004\007\000\002" +
    "\004\011\000\002\004\007\000\002\004\006\000\002\004" +
    "\011\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\004\000\002\003\006\000\002\003\005\000\002" +
    "\003\010\000\002\003\010\000\002\003\006\000\002\003" +
    "\006\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\007\000\002" +
    "\003\007\000\002\003\006\000\002\003\004\000\002\003" +
    "\005\000\002\022\005\000\002\022\003\000\002\022\002" +
    "\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\004\017\005\001\002\000\004\002\303\001" +
    "\002\000\004\046\006\001\002\000\004\044\007\001\002" +
    "\000\004\037\010\001\002\000\004\061\015\001\002\000" +
    "\006\002\ufffa\037\ufffa\001\002\000\006\002\000\037\013" +
    "\001\002\000\004\061\015\001\002\000\006\002\ufffb\037" +
    "\ufffb\001\002\000\042\004\uffba\005\uffba\006\uffba\007\uffba" +
    "\010\uffba\011\uffba\022\uffba\023\uffba\024\uffba\027\uffba\030" +
    "\uffba\041\uffba\042\uffba\044\uffba\045\uffba\061\uffba\001\002" +
    "\000\004\011\017\001\002\000\026\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\032\uffef\036\uffef\047\uffef\050\uffef\051\uffef" +
    "\061\uffef\001\002\000\026\012\ufff1\013\022\014\021\015" +
    "\033\032\ufff1\036\023\047\030\050\027\051\025\061\015" +
    "\001\002\000\006\041\263\061\uffe8\001\002\000\004\061" +
    "\uffea\001\002\000\004\061\uffe7\001\002\000\006\012\040" +
    "\032\041\001\002\000\004\061\uffe4\001\002\000\004\061" +
    "\uffe3\001\002\000\004\061\uffe5\001\002\000\006\041\036" +
    "\061\uffe6\001\002\000\004\061\015\001\002\000\100\005" +
    "\ufff0\007\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\020\ufff0\025\ufff0\026\ufff0\031\ufff0\032\ufff0\033\ufff0\036" +
    "\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0" +
    "\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063" +
    "\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\001\002\000\004" +
    "\061\uffe9\001\002\000\004\044\035\001\002\000\100\005" +
    "\ufff3\007\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\020\ufff3\025\ufff3\026\ufff3\031\ufff3\032\ufff3\033\ufff3\036" +
    "\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3" +
    "\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063" +
    "\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\001\002\000\004" +
    "\042\037\001\002\000\004\061\uffec\001\002\000\006\002" +
    "\ufff9\037\ufff9\001\002\000\022\013\022\014\021\015\033" +
    "\036\023\047\030\050\027\051\025\061\015\001\002\000" +
    "\006\012\ufff2\032\ufff2\001\002\000\004\061\015\001\002" +
    "\000\004\007\045\001\002\000\026\010\ufff6\013\022\014" +
    "\021\015\033\027\ufff6\036\023\047\030\050\027\051\025" +
    "\061\015\001\002\000\004\061\015\001\002\000\006\010" +
    "\ufff7\027\ufff7\001\002\000\006\010\052\027\051\001\002" +
    "\000\022\013\022\014\021\015\033\036\023\047\030\050" +
    "\027\051\025\061\015\001\002\000\004\011\053\001\002" +
    "\000\076\005\uffef\007\uffef\011\uffef\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\020\uffef\025\uffef\026\uffef\031\uffef\033\uffef" +
    "\036\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054" +
    "\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef" +
    "\063\uffef\064\uffef\065\uffef\066\uffef\067\uffef\001\002\000" +
    "\076\005\077\007\067\011\070\012\ufffd\013\022\014\021" +
    "\015\033\020\066\025\062\026\060\031\103\033\ufffd\036" +
    "\023\047\030\050\027\051\025\052\073\053\061\054\055" +
    "\055\104\056\105\057\076\060\072\061\015\062\063\063" +
    "\100\064\075\065\101\066\065\067\071\001\002\000\004" +
    "\007\253\001\002\000\060\005\077\007\067\011\070\012" +
    "\ufffd\020\066\025\062\026\060\031\103\033\ufffd\052\073" +
    "\053\061\054\055\055\104\056\105\057\076\060\072\061" +
    "\015\062\063\063\100\064\075\065\101\066\065\067\071" +
    "\001\002\000\026\004\uffc4\005\uffc4\006\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\030\uffc4\041\207\045\210\061\uffe3\001\002" +
    "\000\004\007\246\001\002\000\004\007\242\001\002\000" +
    "\036\005\077\007\067\025\062\031\103\056\105\057\076" +
    "\060\072\061\015\062\063\063\100\064\075\065\101\066" +
    "\065\067\071\001\002\000\032\004\uffc6\005\uffc6\006\uffc6" +
    "\010\uffc6\022\uffc6\023\uffc6\024\uffc6\027\uffc6\030\uffc6\041" +
    "\uffc6\042\uffc6\044\uffc6\001\002\000\022\004\114\005\111" +
    "\006\117\022\120\023\113\024\112\030\233\041\121\001" +
    "\002\000\032\004\uffc7\005\uffc7\006\uffc7\010\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\027\uffc7\030\uffc7\041\uffc7\042\uffc7\044" +
    "\uffc7\001\002\000\004\007\225\001\002\000\040\005\077" +
    "\007\067\015\221\025\062\031\103\056\105\057\076\060" +
    "\072\061\015\062\063\063\100\064\075\065\101\066\065" +
    "\067\071\001\002\000\056\005\077\007\067\011\070\012" +
    "\ufffd\020\066\025\062\026\060\031\103\052\073\053\061" +
    "\054\055\055\104\056\105\057\076\060\072\061\015\062" +
    "\063\063\100\064\075\065\101\066\065\067\071\001\002" +
    "\000\032\004\uffc3\005\uffc3\006\uffc3\010\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\027\uffc3\030\uffc3\041\uffc3\042\uffc3\044\uffc3" +
    "\001\002\000\032\004\uffca\005\uffca\006\uffca\010\uffca\022" +
    "\uffca\023\uffca\024\uffca\027\uffca\030\uffca\041\uffca\042\uffca" +
    "\044\uffca\001\002\000\004\007\174\001\002\000\006\012" +
    "\uffed\033\167\001\002\000\032\004\uffc9\005\uffc9\006\uffc9" +
    "\010\uffc9\022\uffc9\023\uffc9\024\uffc9\027\uffc9\030\uffc9\041" +
    "\uffc9\042\uffc9\044\uffc9\001\002\000\004\007\164\001\002" +
    "\000\036\005\077\007\067\025\062\031\103\056\105\057" +
    "\076\060\072\061\015\062\063\063\100\064\075\065\101" +
    "\066\065\067\071\001\002\000\032\004\uffc5\005\uffc5\006" +
    "\uffc5\010\uffc5\022\uffc5\023\uffc5\024\uffc5\027\uffc5\030\uffc5" +
    "\041\uffc5\042\uffc5\044\uffc5\001\002\000\032\004\uffc8\005" +
    "\uffc8\006\uffc8\010\uffc8\022\uffc8\023\uffc8\024\uffc8\027\uffc8" +
    "\030\uffc8\041\uffc8\042\uffc8\044\uffc8\001\002\000\062\005" +
    "\uffe2\007\uffe2\011\uffe2\012\uffe2\020\uffe2\021\uffe2\025\uffe2" +
    "\026\uffe2\031\uffe2\033\uffe2\052\uffe2\053\uffe2\054\uffe2\055" +
    "\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2" +
    "\064\uffe2\065\uffe2\066\uffe2\067\uffe2\001\002\000\010\014" +
    "\152\047\151\061\015\001\002\000\004\007\144\001\002" +
    "\000\004\007\106\001\002\000\036\005\077\007\067\025" +
    "\062\031\103\056\105\057\076\060\072\061\015\062\063" +
    "\063\100\064\075\065\101\066\065\067\071\001\002\000" +
    "\024\004\114\005\111\006\117\022\120\023\113\024\112" +
    "\027\116\030\115\041\121\001\002\000\032\004\uffc4\005" +
    "\uffc4\006\uffc4\010\uffc4\022\uffc4\023\uffc4\024\uffc4\027\uffc4" +
    "\030\uffc4\041\uffc4\042\uffc4\044\uffc4\001\002\000\036\005" +
    "\077\007\067\025\062\031\103\056\105\057\076\060\072" +
    "\061\015\062\063\063\100\064\075\065\101\066\065\067" +
    "\071\001\002\000\036\005\077\007\067\025\062\031\103" +
    "\056\105\057\076\060\072\061\015\062\063\063\100\064" +
    "\075\065\101\066\065\067\071\001\002\000\036\005\077" +
    "\007\067\025\062\031\103\056\105\057\076\060\072\061" +
    "\015\062\063\063\100\064\075\065\101\066\065\067\071" +
    "\001\002\000\036\005\077\007\067\025\062\031\103\056" +
    "\105\057\076\060\072\061\015\062\063\063\100\064\075" +
    "\065\101\066\065\067\071\001\002\000\006\043\131\061" +
    "\015\001\002\000\036\005\077\007\067\025\062\031\103" +
    "\056\105\057\076\060\072\061\015\062\063\063\100\064" +
    "\075\065\101\066\065\067\071\001\002\000\036\005\077" +
    "\007\067\025\062\031\103\056\105\057\076\060\072\061" +
    "\015\062\063\063\100\064\075\065\101\066\065\067\071" +
    "\001\002\000\036\005\077\007\067\025\062\031\103\056" +
    "\105\057\076\060\072\061\015\062\063\063\100\064\075" +
    "\065\101\066\065\067\071\001\002\000\036\005\077\007" +
    "\067\025\062\031\103\056\105\057\076\060\072\061\015" +
    "\062\063\063\100\064\075\065\101\066\065\067\071\001" +
    "\002\000\024\004\114\005\111\006\117\022\120\023\113" +
    "\024\112\030\115\041\121\042\123\001\002\000\032\004" +
    "\uffd0\005\uffd0\006\uffd0\010\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\027\uffd0\030\uffd0\041\uffd0\042\uffd0\044\uffd0\001\002\000" +
    "\032\004\114\005\111\006\117\010\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\027\uffd6\030\115\041\121\042\uffd6\044\uffd6\001" +
    "\002\000\032\004\uffd2\005\uffd2\006\uffd2\010\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\027\uffd2\030\115\041\121\042\uffd2\044" +
    "\uffd2\001\002\000\024\004\114\005\111\006\117\010\127" +
    "\022\120\023\113\024\112\030\115\041\121\001\002\000" +
    "\032\004\uffcd\005\uffcd\006\uffcd\010\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\027\uffcd\030\uffcd\041\uffcd\042\uffcd\044\uffcd\001" +
    "\002\000\004\007\132\001\002\000\032\004\uffcf\005\uffcf" +
    "\006\uffcf\010\uffcf\022\uffcf\023\uffcf\024\uffcf\027\uffcf\030" +
    "\uffcf\041\uffcf\042\uffcf\044\uffcf\001\002\000\042\005\077" +
    "\007\067\010\uffbb\025\062\027\uffbb\031\103\056\105\057" +
    "\076\060\072\061\015\062\063\063\100\064\075\065\101" +
    "\066\065\067\071\001\002\000\026\004\114\005\111\006" +
    "\117\010\uffbc\022\120\023\113\024\112\027\uffbc\030\115" +
    "\041\121\001\002\000\006\010\136\027\135\001\002\000" +
    "\036\005\077\007\067\025\062\031\103\056\105\057\076" +
    "\060\072\061\015\062\063\063\100\064\075\065\101\066" +
    "\065\067\071\001\002\000\032\004\uffce\005\uffce\006\uffce" +
    "\010\uffce\022\uffce\023\uffce\024\uffce\027\uffce\030\uffce\041" +
    "\uffce\042\uffce\044\uffce\001\002\000\026\004\114\005\111" +
    "\006\117\010\uffbd\022\120\023\113\024\112\027\uffbd\030" +
    "\115\041\121\001\002\000\032\004\uffd4\005\uffd4\006\117" +
    "\010\uffd4\022\uffd4\023\uffd4\024\uffd4\027\uffd4\030\115\041" +
    "\121\042\uffd4\044\uffd4\001\002\000\032\004\114\005\111" +
    "\006\117\010\uffd5\022\120\023\uffd5\024\uffd5\027\uffd5\030" +
    "\115\041\121\042\uffd5\044\uffd5\001\002\000\032\004\114" +
    "\005\111\006\117\010\uffd7\022\120\023\113\024\uffd7\027" +
    "\uffd7\030\115\041\121\042\uffd7\044\uffd7\001\002\000\032" +
    "\004\uffd3\005\uffd3\006\117\010\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\027\uffd3\030\115\041\121\042\uffd3\044\uffd3\001\002" +
    "\000\036\005\077\007\067\025\062\031\103\056\105\057" +
    "\076\060\072\061\015\062\063\063\100\064\075\065\101" +
    "\066\065\067\071\001\002\000\024\004\114\005\111\006" +
    "\117\010\146\022\120\023\113\024\112\030\115\041\121" +
    "\001\002\000\004\044\147\001\002\000\062\005\uffde\007" +
    "\uffde\011\uffde\012\uffde\020\uffde\021\uffde\025\uffde\026\uffde" +
    "\031\uffde\033\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056" +
    "\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde" +
    "\065\uffde\066\uffde\067\uffde\001\002\000\004\007\161\001" +
    "\002\000\004\041\156\001\002\000\004\041\153\001\002" +
    "\000\036\005\077\007\067\025\062\031\103\056\105\057" +
    "\076\060\072\061\015\062\063\063\100\064\075\065\101" +
    "\066\065\067\071\001\002\000\024\004\114\005\111\006" +
    "\117\022\120\023\113\024\112\030\115\041\121\042\155" +
    "\001\002\000\032\004\uffc2\005\uffc2\006\uffc2\010\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\027\uffc2\030\uffc2\041\uffc2\042\uffc2" +
    "\044\uffc2\001\002\000\036\005\077\007\067\025\062\031" +
    "\103\056\105\057\076\060\072\061\015\062\063\063\100" +
    "\064\075\065\101\066\065\067\071\001\002\000\024\004" +
    "\114\005\111\006\117\022\120\023\113\024\112\030\115" +
    "\041\121\042\160\001\002\000\032\004\uffc1\005\uffc1\006" +
    "\uffc1\010\uffc1\022\uffc1\023\uffc1\024\uffc1\027\uffc1\030\uffc1" +
    "\041\uffc1\042\uffc1\044\uffc1\001\002\000\004\010\162\001" +
    "\002\000\032\004\uffc0\005\uffc0\006\uffc0\010\uffc0\022\uffc0" +
    "\023\uffc0\024\uffc0\027\uffc0\030\uffc0\041\uffc0\042\uffc0\044" +
    "\uffc0\001\002\000\032\004\uffd1\005\uffd1\006\117\010\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\027\uffd1\030\115\041\121\042" +
    "\uffd1\044\uffd1\001\002\000\036\005\077\007\067\025\062" +
    "\031\103\056\105\057\076\060\072\061\015\062\063\063" +
    "\100\064\075\065\101\066\065\067\071\001\002\000\024" +
    "\004\114\005\111\006\117\010\166\022\120\023\113\024" +
    "\112\030\115\041\121\001\002\000\032\004\uffcc\005\uffcc" +
    "\006\uffcc\010\uffcc\022\uffcc\023\uffcc\024\uffcc\027\uffcc\030" +
    "\uffcc\041\uffcc\042\uffcc\044\uffcc\001\002\000\036\005\077" +
    "\007\067\025\062\031\103\056\105\057\076\060\072\061" +
    "\015\062\063\063\100\064\075\065\101\066\065\067\071" +
    "\001\002\000\004\012\171\001\002\000\006\012\ufff4\032" +
    "\ufff4\001\002\000\024\004\114\005\111\006\117\022\120" +
    "\023\113\024\112\030\115\041\121\044\173\001\002\000" +
    "\004\012\uffee\001\002\000\036\005\077\007\067\025\062" +
    "\031\103\056\105\057\076\060\072\061\015\062\063\063" +
    "\100\064\075\065\101\066\065\067\071\001\002\000\024" +
    "\004\114\005\111\006\117\022\120\023\113\024\112\027" +
    "\176\030\115\041\121\001\002\000\036\005\077\007\067" +
    "\025\062\031\103\056\105\057\076\060\072\061\015\062" +
    "\063\063\100\064\075\065\101\066\065\067\071\001\002" +
    "\000\024\004\114\005\111\006\117\022\120\023\113\024" +
    "\112\027\200\030\115\041\121\001\002\000\036\005\077" +
    "\007\067\025\062\031\103\056\105\057\076\060\072\061" +
    "\015\062\063\063\100\064\075\065\101\066\065\067\071" +
    "\001\002\000\024\004\114\005\111\006\117\010\202\022" +
    "\120\023\113\024\112\030\115\041\121\001\002\000\004" +
    "\044\203\001\002\000\062\005\uffe1\007\uffe1\011\uffe1\012" +
    "\uffe1\020\uffe1\021\uffe1\025\uffe1\026\uffe1\031\uffe1\033\uffe1" +
    "\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060" +
    "\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1" +
    "\067\uffe1\001\002\000\024\004\uffc4\005\uffc4\006\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\030\uffc4\041\207\045\210\001\002" +
    "\000\004\012\206\001\002\000\062\005\ufffc\007\ufffc\011" +
    "\ufffc\012\ufffc\020\ufffc\021\ufffc\025\ufffc\026\ufffc\031\ufffc" +
    "\033\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057" +
    "\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc" +
    "\066\ufffc\067\ufffc\001\002\000\036\005\077\007\067\025" +
    "\062\031\103\056\105\057\076\060\072\061\015\062\063" +
    "\063\100\064\075\065\101\066\065\067\071\001\002\000" +
    "\036\005\077\007\067\025\062\031\103\056\105\057\076" +
    "\060\072\061\015\062\063\063\100\064\075\065\101\066" +
    "\065\067\071\001\002\000\024\004\114\005\111\006\117" +
    "\022\120\023\113\024\112\030\115\041\121\044\212\001" +
    "\002\000\062\005\uffd9\007\uffd9\011\uffd9\012\uffd9\020\uffd9" +
    "\021\uffd9\025\uffd9\026\uffd9\031\uffd9\033\uffd9\052\uffd9\053" +
    "\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9" +
    "\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\001" +
    "\002\000\024\004\114\005\111\006\117\022\120\023\113" +
    "\024\112\030\115\041\121\042\214\001\002\000\004\045" +
    "\215\001\002\000\036\005\077\007\067\025\062\031\103" +
    "\056\105\057\076\060\072\061\015\062\063\063\100\064" +
    "\075\065\101\066\065\067\071\001\002\000\024\004\114" +
    "\005\111\006\117\022\120\023\113\024\112\030\115\041" +
    "\121\044\217\001\002\000\062\005\uffd8\007\uffd8\011\uffd8" +
    "\012\uffd8\020\uffd8\021\uffd8\025\uffd8\026\uffd8\031\uffd8\033" +
    "\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8" +
    "\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066" +
    "\uffd8\067\uffd8\001\002\000\024\004\114\005\111\006\117" +
    "\010\224\022\120\023\113\024\112\030\115\041\121\001" +
    "\002\000\004\010\222\001\002\000\036\005\077\007\067" +
    "\025\062\031\103\056\105\057\076\060\072\061\015\062" +
    "\063\063\100\064\075\065\101\066\065\067\071\001\002" +
    "\000\032\004\uffcb\005\uffcb\006\uffcb\010\uffcb\022\uffcb\023" +
    "\uffcb\024\uffcb\027\uffcb\030\uffcb\041\uffcb\042\uffcb\044\uffcb" +
    "\001\002\000\032\004\uffbe\005\uffbe\006\uffbe\010\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\027\uffbe\030\uffbe\041\uffbe\042\uffbe" +
    "\044\uffbe\001\002\000\036\005\077\007\067\025\062\031" +
    "\103\056\105\057\076\060\072\061\015\062\063\063\100" +
    "\064\075\065\101\066\065\067\071\001\002\000\024\004" +
    "\114\005\111\006\117\010\227\022\120\023\113\024\112" +
    "\030\115\041\121\001\002\000\054\005\077\007\067\011" +
    "\070\020\066\025\062\026\060\031\103\052\073\053\061" +
    "\054\055\055\104\056\105\057\076\060\072\061\015\062" +
    "\063\063\100\064\075\065\101\066\065\067\071\001\002" +
    "\000\062\005\uffdc\007\uffdc\011\uffdc\012\uffdc\020\uffdc\021" +
    "\231\025\uffdc\026\uffdc\031\uffdc\033\uffdc\052\uffdc\053\uffdc" +
    "\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062" +
    "\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\001\002" +
    "\000\054\005\077\007\067\011\070\020\066\025\062\026" +
    "\060\031\103\052\073\053\061\054\055\055\104\056\105" +
    "\057\076\060\072\061\015\062\063\063\100\064\075\065" +
    "\101\066\065\067\071\001\002\000\062\005\uffdb\007\uffdb" +
    "\011\uffdb\012\uffdb\020\uffdb\021\uffdb\025\uffdb\026\uffdb\031" +
    "\uffdb\033\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb" +
    "\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065" +
    "\uffdb\066\uffdb\067\uffdb\001\002\000\006\043\131\061\015" +
    "\001\002\000\004\007\235\001\002\000\042\005\077\007" +
    "\067\010\uffbb\025\062\027\uffbb\031\103\056\105\057\076" +
    "\060\072\061\015\062\063\063\100\064\075\065\101\066" +
    "\065\067\071\001\002\000\006\010\237\027\135\001\002" +
    "\000\024\004\uffce\005\uffce\006\uffce\022\uffce\023\uffce\024" +
    "\uffce\030\uffce\041\uffce\044\240\001\002\000\062\005\uffdd" +
    "\007\uffdd\011\uffdd\012\uffdd\020\uffdd\021\uffdd\025\uffdd\026" +
    "\uffdd\031\uffdd\033\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd" +
    "\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064" +
    "\uffdd\065\uffdd\066\uffdd\067\uffdd\001\002\000\032\004\uffbf" +
    "\005\uffbf\006\uffbf\010\uffbf\022\uffbf\023\uffbf\024\uffbf\027" +
    "\uffbf\030\115\041\121\042\uffbf\044\uffbf\001\002\000\036" +
    "\005\077\007\067\025\062\031\103\056\105\057\076\060" +
    "\072\061\015\062\063\063\100\064\075\065\101\066\065" +
    "\067\071\001\002\000\024\004\114\005\111\006\117\010" +
    "\244\022\120\023\113\024\112\030\115\041\121\001\002" +
    "\000\004\044\245\001\002\000\062\005\uffe0\007\uffe0\011" +
    "\uffe0\012\uffe0\020\uffe0\021\uffe0\025\uffe0\026\uffe0\031\uffe0" +
    "\033\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057" +
    "\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0" +
    "\066\uffe0\067\uffe0\001\002\000\036\005\077\007\067\025" +
    "\062\031\103\056\105\057\076\060\072\061\015\062\063" +
    "\063\100\064\075\065\101\066\065\067\071\001\002\000" +
    "\024\004\114\005\111\006\117\010\250\022\120\023\113" +
    "\024\112\030\115\041\121\001\002\000\054\005\077\007" +
    "\067\011\070\020\066\025\062\026\060\031\103\052\073" +
    "\053\061\054\055\055\104\056\105\057\076\060\072\061" +
    "\015\062\063\063\100\064\075\065\101\066\065\067\071" +
    "\001\002\000\062\005\uffda\007\uffda\011\uffda\012\uffda\020" +
    "\uffda\021\uffda\025\uffda\026\uffda\031\uffda\033\uffda\052\uffda" +
    "\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061" +
    "\uffda\062\uffda\063\uffda\064\uffda\065\uffda\066\uffda\067\uffda" +
    "\001\002\000\006\012\ufffe\033\ufffe\001\002\000\036\005" +
    "\077\007\067\025\062\031\103\056\105\057\076\060\072" +
    "\061\015\062\063\063\100\064\075\065\101\066\065\067" +
    "\071\001\002\000\024\004\114\005\111\006\117\022\120" +
    "\023\113\024\112\027\255\030\115\041\121\001\002\000" +
    "\036\005\077\007\067\025\062\031\103\056\105\057\076" +
    "\060\072\061\015\062\063\063\100\064\075\065\101\066" +
    "\065\067\071\001\002\000\024\004\114\005\111\006\117" +
    "\010\257\022\120\023\113\024\112\030\115\041\121\001" +
    "\002\000\004\044\260\001\002\000\062\005\uffdf\007\uffdf" +
    "\011\uffdf\012\uffdf\020\uffdf\021\uffdf\025\uffdf\026\uffdf\031" +
    "\uffdf\033\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf" +
    "\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065" +
    "\uffdf\066\uffdf\067\uffdf\001\002\000\006\010\ufff8\027\ufff8" +
    "\001\002\000\006\010\ufff5\027\ufff5\001\002\000\004\042" +
    "\264\001\002\000\004\061\uffeb\001\002\000\004\011\266" +
    "\001\002\000\004\032\267\001\002\000\004\034\270\001" +
    "\002\000\004\036\271\001\002\000\004\016\272\001\002" +
    "\000\004\007\273\001\002\000\004\035\274\001\002\000" +
    "\004\041\275\001\002\000\004\042\276\001\002\000\004" +
    "\061\015\001\002\000\004\010\300\001\002\000\004\011" +
    "\070\001\002\000\004\012\302\001\002\000\006\002\uffff" +
    "\037\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\010\001\001" +
    "\000\004\023\264\001\001\000\004\012\011\001\001\000" +
    "\004\011\013\001\001\000\004\023\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\017\001\001\000\012\010\030\014\023\015\031\023\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\042\023\025\001\001" +
    "\000\002\001\001\000\004\023\043\001\001\000\002\001" +
    "\001\000\012\010\045\017\046\020\047\023\025\001\001" +
    "\000\004\023\261\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\045\017\260\023\025\001\001\000\002" +
    "\001\001\000\004\016\053\001\001\000\020\003\063\004" +
    "\055\005\073\006\101\010\030\015\031\023\056\001\001" +
    "\000\002\001\001\000\014\003\063\004\055\005\251\006" +
    "\101\023\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\240\023\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\217\023\107\001\001\000\014\003" +
    "\063\004\055\005\204\006\101\023\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\162\023\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\106\023\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\142" +
    "\023\107\001\001\000\006\003\141\023\107\001\001\000" +
    "\006\003\140\023\107\001\001\000\006\003\137\023\107" +
    "\001\001\000\004\023\127\001\001\000\006\003\125\023" +
    "\107\001\001\000\006\003\124\023\107\001\001\000\006" +
    "\003\123\023\107\001\001\000\006\003\121\023\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\132\022\133" +
    "\023\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\136\023\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\144\023\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\153\023\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\156\023\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\164\023\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\171\023\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\174\023\107\001\001\000" +
    "\002\001\001\000\006\003\176\023\107\001\001\000\002" +
    "\001\001\000\006\003\200\023\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\212\023" +
    "\107\001\001\000\006\003\210\023\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\215\023\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\222\023\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\225\023\107\001\001\000\002\001" +
    "\001\000\012\003\063\004\227\006\101\023\203\001\001" +
    "\000\002\001\001\000\012\003\063\004\231\006\101\023" +
    "\203\001\001\000\002\001\001\000\004\023\233\001\001" +
    "\000\002\001\001\000\010\003\132\022\235\023\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\242\023\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\246\023\107\001\001\000\002\001\001\000\012\003" +
    "\063\004\250\006\101\023\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\253\023\107\001\001\000" +
    "\002\001\001\000\006\003\255\023\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\276\001\001\000\002\001\001\000\004\006\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$mj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$mj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$mj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public PrintWriter out; 
    
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] " 
                               + message + " at " + tok.toString() );
    }
            

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$mj$actions {
  private final mj parser;

  /** Constructor */
  CUP$mj$actions(mj parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$mj$do_action(
    int                        CUP$mj$act_num,
    java_cup.runtime.lr_parser CUP$mj$parser,
    java.util.Stack            CUP$mj$stack,
    int                        CUP$mj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$mj$result;

      /* select the action based on the action number */
      switch (CUP$mj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // identifier ::= ID 
            {
              IdLiteral RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new IdLiteral(i.line, i.pos, i.lexeme);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("identifier",17, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp_list ::= 
            {
              LinkedList<IExp> RESULT =null;
		
        RESULT = new LinkedList<IExp>();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp_list",16, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp_list ::= exp 
            {
              LinkedList<IExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        LinkedList<IExp> list = new LinkedList<IExp>();
        if (e != null) {
            list.add(e);
        }
        RESULT = list;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp_list",16, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp_list ::= exp_list COMMA exp 
            {
              LinkedList<IExp> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IExp> list = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        if (e != null) {
            list.add(e);
        }
        RESULT = list;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp_list",16, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp ::= LPAREN exp RPAREN 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = e;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp ::= NOT exp 
            {
              IExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new NotExp(n.line, n.pos, e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= NEW identifier LPAREN RPAREN 
            {
              IExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
        RESULT = new NewExp(n.line, n.pos, id.getLexeme());
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= NEW MEGGYCOLOR LBRACKET exp RBRACKET 
            {
              IExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp size = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        ColorArrayType item=new ColorArrayType(n.line, n.pos);
        RESULT=new NewArrayExp(n.line, n.pos, item, size);          
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= NEW INT LBRACKET exp RBRACKET 
            {
              IExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp size = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        IntArrayType item=new IntArrayType(n.line, n.pos);
        RESULT = new NewArrayExp(n.line,n.pos,item,size);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= THIS 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ThisLiteral(t.line, t.pos, t.lexeme, t.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= identifier 
            {
              IExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = id;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= FALSE 
            {
              IExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue f = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new FalseLiteral(f.line, f.pos, f.lexeme, f.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= TRUE 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new TrueLiteral(t.line, t.pos, t.lexeme, t.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= TONE_LITERAL 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ToneLiteral(t.line, t.pos, t.lexeme, t.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= BUTTON_LITERAL 
            {
              IExp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ButtonLiteral(b.line, b.pos, b.lexeme, b.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= COLOR_LITERAL 
            {
              IExp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ColorLiteral(c.line, c.pos, c.lexeme, c.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= INT_LITERAL 
            {
              IExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new IntLiteral(n.line, n.pos, n.lexeme, n.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= LPAREN BYTE RPAREN exp 
            {
              IExp RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue lp = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ByteCast(lp.line, lp.pos, e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= MEGGYCHECKBUTTON LPAREN exp RPAREN 
            {
              IExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new MeggyCheckButton(m.line, m.pos, e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN 
            {
              IExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new MeggyGetPixel(m.line, m.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp DOT identifier LPAREN exp_list RPAREN 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IExp> list = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new CallExp(e1.getLine(), e1.getPos(), e1, id.getLexeme(), list);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp DOT LENGTH 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue l = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new LengthExp(l.line, l.pos, e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp LBRACKET exp RBRACKET 
            {
              IExp RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp arr = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp idx = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new ArrayExp(arr.getLine(), arr.getPos(), arr, idx);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= MINUS exp 
            {
              IExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new NegExp(m.line, m.pos, e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp TIMES exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new MulExp(op.line, op.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp MINUS exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new MinusExp(op.line, op.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp PLUS exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new PlusExp(op.line, op.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp EQUAL exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue eq = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new EqualExp(eq.line, eq.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp LT exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue lt = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new LtExp(lt.line, lt.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp AND exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new AndExp(op.line, op.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= identifier LBRACKET exp RBRACKET ASSIGN exp SEMI 
            {
              IStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp idx = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new ArrayAssignStatement(id.getLine(), id.getPos(), id, idx, e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= identifier ASSIGN exp SEMI 
            {
              IStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new AssignStatement(id.getLine(), id.getPos(), id.getLexeme(), e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= WHILE LPAREN exp RPAREN statement 
            {
              IStatement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue w = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new WhileStatement(w.line, w.pos, e, s);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= IF LPAREN exp RPAREN statement ELSE statement 
            {
              IStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement s1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new IfStatement(i.line, i.pos, e, s1, s2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= IF LPAREN exp RPAREN statement 
            {
              IStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new IfStatement(i.line, i.pos, e, s, null);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= exp DOT identifier LPAREN exp_list RPAREN SEMI 
            {
              IStatement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IExp> list = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
        RESULT = new CallStatement(e1.getLine(), e1.getPos(), e1, id.getLexeme(), list);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= MEGGYDELAY LPAREN exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue md = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
        RESULT = new MeggyDelay(md.line, md.pos, e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int mtleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue mt = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
        RESULT = new MeggyToneStart(mt.line, mt.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= MEGGYSETAUXLEDS LPAREN exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int msaleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int msaright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue msa = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
        RESULT = new MeggySetAuxLEDs(msa.line, msa.pos, e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int mspleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int mspright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue msp = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e3 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
        RESULT = new MeggySetPixel(msp.line, msp.pos, e1, e2, e3);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= block_statement 
            {
              IStatement RESULT =null;
		int blkleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int blkright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		BlockStatement blk = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = blk;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= identifier 
            {
              IType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ClassType(id.getLine(), id.getPos(), id.getLexeme());
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type ::= MEGGYTONE 
            {
              IType RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ToneType(m.line, m.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type ::= MEGGYBUTTON 
            {
              IType RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ButtonType(m.line, m.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= MEGGYCOLOR 
            {
              IType RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ColorType(m.line, m.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= VOID 
            {
              IType RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new VoidType(v.line, v.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= INT 
            {
              IType RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new IntType(i.line, i.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= BYTE 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ByteType(b.line, b.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= BOOLEAN 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new BoolType(b.line, b.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= INT LBRACKET RBRACKET 
            {
              IType RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
        RESULT = new IntArrayType(i.line, i.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= MEGGYCOLOR LBRACKET RBRACKET 
            {
              IType RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
        RESULT = new ColorArrayType(m.line, m.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // return_stmt ::= 
            {
              IExp RESULT =null;
		
        RESULT = null;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("return_stmt",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // return_stmt ::= RETURN exp SEMI 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = e;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("return_stmt",15, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_decl_list ::= 
            {
              LinkedList<VarDecl> RESULT =null;
		
        RESULT = new LinkedList<VarDecl>();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("var_decl_list",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_decl_list ::= var_decl_list var_declaration 
            {
              LinkedList<VarDecl> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<VarDecl> list = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        if (v != null) {
            list.add(v);
        }
        RESULT = list;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("var_decl_list",12, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // method_decl_list ::= 
            {
              LinkedList<MethodDecl> RESULT =null;
		
        RESULT = new LinkedList<MethodDecl>();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_decl_list",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method_decl_list ::= method_decl_list method_declaration 
            {
              LinkedList<MethodDecl> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<MethodDecl> list = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		MethodDecl m = (MethodDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        if (m != null) {
            list.add(m);
        }
        RESULT = list;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_decl_list",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_declaration ::= type identifier SEMI 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new VarDecl(id.getLine(), id.getPos(), t, id.getLexeme());
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("var_declaration",11, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method_declaration ::= PUBLIC type identifier LPAREN formal_param_list RPAREN LBRACE var_decl_list statement_list return_stmt RBRACE 
            {
              MethodDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		LinkedList<Formal> params = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		LinkedList<VarDecl> vars = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IStatement> stmts = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp ret = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new MethodDecl(id.getLine(), id.getPos(), t, id.getLexeme(), params, vars, stmts, ret);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_declaration",9, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formal_param ::= type identifier 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new Formal(t.getLine(), t.getPos(), t, id.getLexeme());
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal_param",13, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formal_param_list ::= 
            {
              LinkedList<Formal> RESULT =null;
		
        RESULT = new LinkedList<Formal>();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal_param_list",14, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formal_param_list ::= formal_param 
            {
              LinkedList<Formal> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Formal param = (Formal)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        LinkedList<Formal> list = new LinkedList<Formal>();
        list.add(param);
        RESULT = list;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal_param_list",14, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // formal_param_list ::= formal_param_list COMMA formal_param 
            {
              LinkedList<Formal> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<Formal> list = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Formal param = (Formal)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        if (param != null) {
            list.add(param);
        }
        RESULT = list;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal_param_list",14, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // class_declaration ::= CLASS identifier LBRACE var_decl_list method_decl_list RBRACE 
            {
              TopClassDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<VarDecl> vars = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int methodsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int methodsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<MethodDecl> methods = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new TopClassDecl(id.getLine(), id.getPos(), id.getLexeme(), vars, methods);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_declaration",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class_decl_list ::= 
            {
              LinkedList<IClassDecl> RESULT =null;
		
        RESULT = new LinkedList<IClassDecl>();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_decl_list",8, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class_decl_list ::= class_decl_list class_declaration 
            {
              LinkedList<IClassDecl> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IClassDecl> list = (LinkedList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		TopClassDecl c = (TopClassDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        if (c != null) {
            list.add(c);
        }
        RESULT = list;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_decl_list",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block_statement ::= LBRACE statement_list RBRACE 
            {
              BlockStatement RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue lb = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IStatement> list = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new BlockStatement(lb.line, lb.pos, list);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("block_statement",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_list ::= 
            {
              LinkedList<IStatement> RESULT =null;
		
        RESULT = new LinkedList<IStatement>();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_list ::= statement statement_list 
            {
              LinkedList<IStatement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<IStatement> list = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		  
        if (s != null) {
            list.add(0, s);
        } 
        RESULT = list; 
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement RBRACE 
            {
              MainClass RESULT =null;
		int class_nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-13)).left;
		int class_nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-13)).right;
		IdLiteral class_name = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-13)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int param_nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int param_nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IdLiteral param_name = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int bstmtsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int bstmtsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		BlockStatement bstmts = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new MainClass(m.line, m.pos, class_name.getLexeme(), param_name.getLexeme(), bstmts);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("main_class",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= IMPORT MEGGY SEMI main_class class_decl_list 
            {
              Program RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int classmleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int classmright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		MainClass classm = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int class_listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int class_listright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<IClassDecl> class_list = (LinkedList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new Program(i.line, i.pos, classm, class_list); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = start_val;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$mj$parser.done_parsing();
          return CUP$mj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

